FROM alpine/git as clone
ARG url
WORKDIR /app
RUN git clone ${url}

#FROM node:8.11.2-alpine as node
#FROM node:9.6.1

# set working directory
#WORKDIR /usr/src/app
#ENV PATH /usr/src/app/node_modules/.bin:$PATH

#COPY --from=clone ${package} ./
#COPY --from=clone /app/tm-recipes-front/package*.json ./
#RUN npm install

#COPY . .
#RUN npm run build

#FROM nginx:1.13.12-alpine
#COPY --from=node /usr/src/app/dist/angular-docker /usr/share/nginx/html
#COPY ./nginx.conf /etc/nginx/conf.d/default.conf


#https://github.com/Ismaestro/angular7-example-app/blob/master/Dockerfile
FROM node:8-alpine as builder
COPY --from=clone /app/angular7/package.json /app/angular7/package-lock.json ./

RUN npm set progress=false && npm config set depth 0 && npm cache clean --force

## Storing node modules on a separate layer will prevent unnecessary npm installs at each build
RUN npm i && mkdir /ng-app && cp -R ./node_modules ./ng-app

WORKDIR /ng-app

COPY . .

## Build the angular app in production mode and store the artifacts in dist folder
RUN $(npm bin)/ng build #--prod

FROM nginx:1.13.3-alpine

## Copy our default nginx config
COPY nginx/default.conf /etc/nginx/conf.d/

## Remove default nginx website
RUN rm -rf /usr/share/nginx/html/*

## From 'builder' stage copy over the artifacts in dist folder to default nginx public folder
COPY --from=builder /ng-app/dist /usr/share/nginx/html

CMD ["nginx", "-g", "daemon off;"]





